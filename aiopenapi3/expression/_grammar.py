#!/usr/bin/env python

# CAVEAT UTILITOR
#
# This file was automatically generated by TatSu.
#
#    https://pypi.python.org/pypi/tatsu/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.

from __future__ import annotations

import sys

from tatsu.buffering import Buffer
from tatsu.parsing import Parser
from tatsu.parsing import tatsumasu
from tatsu.parsing import leftrec, nomemo, isname # noqa
from tatsu.util import re, generic_main  # noqa


KEYWORDS = {
    'pool',
    'elsif',
    'subclass',
    'subnet',
    'shared-network',
    'if',
    'class',
    'group',
    'host',
}  # type: ignore


class RuntimeExpressionBuffer(Buffer):
    def __init__(
        self,
        text,
        whitespace=None,
        nameguard=None,
        comments_re='',
        eol_comments_re='',
        ignorecase=None,
        namechars='',
        **kwargs
    ):
        super().__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs
        )


class RuntimeExpressionParser(Parser):
    def __init__(
        self,
        whitespace=None,
        nameguard=None,
        comments_re='',
        eol_comments_re='',
        ignorecase=None,
        left_recursion=True,
        parseinfo=True,
        keywords=None,
        namechars='',
        tokenizercls=RuntimeExpressionBuffer,
        **kwargs
    ):
        if keywords is None:
            keywords = KEYWORDS
        super().__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            parseinfo=parseinfo,
            keywords=keywords,
            namechars=namechars,
            tokenizercls=tokenizercls,
            **kwargs
        )

    @tatsumasu('RuntimeExpression')
    def _start_(self):  # noqa
        self._expression_()
        self._check_eof()

    @tatsumasu('Expression')
    def _expression_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('$url')
                self.name_last_node('root')
            with self._option():
                self._token('$method')
                self.name_last_node('root')
            with self._option():
                self._token('$statusCode')
                self.name_last_node('root')
            with self._option():
                self._token('$request.')
                self.name_last_node('root')
                self._source_()
                self.name_last_node('next')
            with self._option():
                self._token('$response.')
                self.name_last_node('root')
                self._source_()
                self.name_last_node('next')
            self._error(
                'expecting one of: '
                "'$url' '$method' '$statusCode'"
                "'$request.' '$response.'"
            )
        self._define(
            ['next', 'root'],
            []
        )

    @tatsumasu()
    def _source_(self):  # noqa
        with self._choice():
            with self._option():
                self._header_reference_()
            with self._option():
                self._query_reference_()
            with self._option():
                self._path_reference_()
            with self._option():
                self._body_reference_()
            self._error(
                'expecting one of: '
                "'header.' <header_reference> 'query.'"
                "<query_reference> 'path.'"
                "<path_reference> 'body' <body_reference>"
            )

    @tatsumasu('Header')
    def _header_reference_(self):  # noqa
        self._token('header.')
        self._token_()
        self.name_last_node('key')
        self._define(
            ['key'],
            []
        )

    @tatsumasu('Query')
    def _query_reference_(self):  # noqa
        self._token('query.')
        self._name_()
        self.name_last_node('key')
        self._define(
            ['key'],
            []
        )

    @tatsumasu('Path')
    def _path_reference_(self):  # noqa
        self._token('path.')
        self._name_()
        self.name_last_node('key')
        self._define(
            ['key'],
            []
        )

    @tatsumasu('Body')
    def _body_reference_(self):  # noqa
        self._token('body')
        with self._optional():
            self._json_pointer_()
        self.name_last_node('fragment')
        self._define(
            ['fragment'],
            []
        )

    @tatsumasu('JSONPointer')
    def _json_pointer_(self):  # noqa
        self._token('#/')

        def sep1():
            self._token('/')

        def block1():
            self._reference_token_()
        self._gather(block1, sep1)
        self.name_last_node('tokens')
        self._define(
            ['tokens'],
            []
        )

    @tatsumasu()
    def _reference_token_(self):  # noqa

        def block0():
            with self._choice():
                with self._option():
                    self._unescaped_()
                with self._option():
                    self._escaped_()
                self._error(
                    'expecting one of: '
                    "[^\\/~] <unescaped> '~' <escaped>"
                )
        self._closure(block0)

    @tatsumasu()
    def _unescaped_(self):  # noqa
        self._pattern('[^\\/~]')

    @tatsumasu()
    def _escaped_(self):  # noqa
        self._token('~')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('0')
                with self._option():
                    self._token('1')
                self._error(
                    'expecting one of: '
                    "'0' '1'"
                )

    @tatsumasu()
    def _name_(self):  # noqa
        self._pattern('[\\w]*')

    @tatsumasu()
    def _token_(self):  # noqa
        self._pattern("[!#$%&'*+-\\.^-`|~\\w]+")


class RuntimeExpressionSemantics(object):
    def start(self, ast):  # noqa
        return ast

    def expression(self, ast):  # noqa
        return ast

    def source(self, ast):  # noqa
        return ast

    def header_reference(self, ast):  # noqa
        return ast

    def query_reference(self, ast):  # noqa
        return ast

    def path_reference(self, ast):  # noqa
        return ast

    def body_reference(self, ast):  # noqa
        return ast

    def json_pointer(self, ast):  # noqa
        return ast

    def reference_token(self, ast):  # noqa
        return ast

    def unescaped(self, ast):  # noqa
        return ast

    def escaped(self, ast):  # noqa
        return ast

    def name(self, ast):  # noqa
        return ast

    def token(self, ast):  # noqa
        return ast


def main(filename, start=None, **kwargs):
    if start is None:
        start = 'start'
    if not filename or filename == '-':
        text = sys.stdin.read()
    else:
        with open(filename) as f:
            text = f.read()
    parser = RuntimeExpressionParser()
    return parser.parse(
        text,
        rule_name=start,
        filename=filename,
        **kwargs
    )


if __name__ == '__main__':
    import json
    from tatsu.util import asjson

    ast = generic_main(main, RuntimeExpressionParser, name='RuntimeExpression')
    data = asjson(ast)
    print(json.dumps(data, indent=2))
